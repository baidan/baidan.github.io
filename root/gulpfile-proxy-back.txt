var gulp = require('gulp'); //gulp
var less = require('gulp-less'); //less
var autoprefixer = require('gulp-autoprefixer'); //处理css兼容
var cleanCss = require('gulp-clean-css'); //压缩css
var babel = require('gulp-babel'); //babel
var uglify = require('gulp-uglify'); //压缩js
var htmlmin = require('gulp-htmlmin'); //压缩html
var imagemin = require('gulp-imagemin'); //图片压缩
var spriter = require('gulp-css-spriter'); //雪碧图
var base64 = require('gulp-base64'); //base64
var concat = require('gulp-concat'); //合并文件
var del = require('del'); //删除文件
var rename = require('gulp-rename'); //改名
var revCollector = require('gulp-rev-collector'); //给资源文件加时间戳
var rev = require('gulp-rev'); //版本控制
var runSequence = require('run-sequence'); //指定运行gulp任务顺序
var browserSync = require('browser-sync').create(); //浏览器实时刷新
var reload = browserSync.reload;
var version = require('gulp-version-number');
var replace = require('gulp-replace'); //文件名替换，参考：https://www.npmjs.com/package/gulp-replace
var proxy = require('http-proxy-middleware');
var connect = require('gulp-connect');
const versionConfig = {
    'value': '%DT%',
    'append': {
        'key': 'v',
        'to': ['css', 'js'],
    },
};

//统一配置路径
var build = {
    basePath: 'project/',
    css: 'project/static/css/',
    images: 'project/static/images/',
    js: 'project/static/script/',
    fonts: 'project/static/fonts/',
    data: 'project/static/data/'
};

var dev = {
    basePath: 'project-dev/',
    css: 'project-dev/static/css/',
    images: 'project-dev/static/images/',
    js: 'project-dev/static/script/',
    less: 'project-dev/static/less/',
    fonts: 'project-dev/static/fonts/',
    data: 'project-dev/static/data/'
};


/*************************开发模式*************************/

// 开发模式下静态服务器
//使用connect启动一个Web服务器
gulp.task('server:dev', function () {
    connect.server({
        root: dev.basePath,
        livereload: {
            port:'35729'
        },
        host:'172.16.6.246', 
        port: 3000,
        middleware: function (connect, opt) {
            return [
                proxy('/work_space_mock', {
                    target: 'http://172.16.6.246:8084/',
                    changeOrigin:true
                })
            ]
        } 
    });

    gulp.watch([dev.basePath + '**/*' + "*.html", '!' + dev.basePath + 'static'], ["html:dev"]);
    gulp.watch(dev.less + "*.less", ["less"]);
    gulp.watch(dev.css + "*.css", ["css:dev"]);
    gulp.watch([dev.js + "*.js"], ['js:dev']);
});




gulp.task('html:dev', function() {
    return gulp.src([dev.basePath + '**/*' + "*.html", '!' + dev.basePath + 'static'])
        .pipe(gulp.dest(dev.basePath))
        .pipe(connect.reload())

});

gulp.task('less', function() {
    return gulp.src(dev.less + '*.less')
        .pipe(less()) //执行less
        .pipe(autoprefixer({ //兼容设置
            browsers: ["last 10 versions", "> 1%", "Android >= 4", "iOS >= 6"]
        }))
        .pipe(gulp.dest(dev.css))
        .pipe(connect.reload())
});

gulp.task('css:dev', function() {
    return gulp.src([dev.css + '*.css', '!' + dev.css + '*.min.css']) //合并所有css文件 除了 style.min.css style.css
        .pipe(base64({ //图片转换base64
            maxImageSize: 8 * 1024, // 限制图片大小bytes 
        }))
        .pipe(gulp.dest(dev.css)) //输出一个未压缩版本

    .pipe(cleanCss()) //压缩css
        .pipe(rename({ extname: '.min.css' })) //压缩后的文件后面加上.min.css
        .pipe(gulp.dest(dev.css + "min")) //输出一个压缩版本
        .pipe(connect.reload())
});

gulp.task('js:dev', function() {
    return gulp.src([dev.js + '*.js', '!' + dev.js + '*.min.js']) // 合并所有js文件 除了 script.js script.min.js
        .pipe(babel({ //使用babel转es6为es5
            presets: ['es2015']
        }))
        //.pipe(gulp.dest(dev.js))	//输出一个未压缩版本

    .pipe(uglify()) //压缩js
        .pipe(rename({ extname: '.min.js' })) //压缩后的文件后面加上.min.js
        .pipe(gulp.dest(dev.js + "min")) //输出一个压缩版本
        .pipe(connect.reload())
});




/*************************生产模式*************************/
//生产模式下的服务器
gulp.task('server:test', function() {
    runSequence("publish:html");
    runSequence([
        'publish:css_min',
        'publish:js_min',
        'publish:css_lib',
        'publish:js_lib',
        'publish:images',
        'publish:fonts',
        'publish:data'
    ], 'rev');
    browserSync.init({
        server: {
            baseDir: build.basePath,
            index: 'index.html'
        },
        port: 3001
    });
});

//压缩图片，只限jpg和png
gulp.task('imagesmin', function() {
    return gulp.src(dev.images + '*.*')
        .pipe(imagemin())
        .pipe(gulp.dest(build.images))
});


//压缩HTML
gulp.task('publish:html', function() {
    return gulp.src([
            dev.basePath + '**/*' + "*.html", '!' + dev.basePath + 'static'
        ])
        .pipe(htmlmin({
            removeComments: true, //清除HTML注释
            collapseWhitespace: true, //压缩HTML
            collapseBooleanAttributes: true, //省略布尔属性的值 <input checked="true"/> ==> <input />
            removeEmptyAttributes: true, //删除所有空格作属性值 <input id="" /> ==> <input />
            removeScriptTypeAttributes: true, //删除<script>的type="text/javascript"
            removeStyleLinkTypeAttributes: true, //删除<style>和<link>的type="text/css"
            minifyJS: true, //压缩页面JS
            minifyCSS: true //压缩页面CSS
        }))
        .pipe(replace('.css?dev', '.min.css')) //全局替换页面的CSS名称
        .pipe(replace('.js?dev', '.min.js')) //全局替换页面的JS名称
        //.pipe(version(versionConfig))
        .pipe(gulp.dest(build.basePath))
});

gulp.task('publish:css_min', function() {
    return gulp.src([dev.css + 'min/**/*'])
        .pipe(rev()) //set hash key
        .pipe(gulp.dest(build.css))
        .pipe(rev.manifest()) //set hash key json
        .pipe(gulp.dest('./rev/css/')) //dest hash key json
});

gulp.task('publish:css_lib', function() {
    return gulp.src([dev.css + 'lib/**/*'])
        .pipe(gulp.dest(build.css + 'lib'))
});


gulp.task('publish:images', function() {
    return gulp.src([dev.images + '**/*'])
        .pipe(gulp.dest(build.images))
        // 目录结构排除：gulp.src([dev.images + '**/*','!'+dev.images+'page*']) gulp.src([dev.images+'spritesheet.png',dev.images+'*'])
});

gulp.task('publish:fonts', function() {
    return gulp.src([dev.fonts + '**/*'])
        .pipe(gulp.dest(build.fonts))
        // 目录结构排除：gulp.src([dev.images + '**/*','!'+dev.images+'page*']) gulp.src([dev.images+'spritesheet.png',dev.images+'*'])
});


gulp.task('publish:data', function() {
    return gulp.src([dev.data + '**/*'])
        .pipe(gulp.dest(build.data))
        // 目录结构排除：gulp.src([dev.images + '**/*','!'+dev.images+'page*']) gulp.src([dev.images+'spritesheet.png',dev.images+'*'])
});

gulp.task('publish:js_min', function() {
    return gulp.src([dev.js + 'min/**/*'])
        .pipe(rev()) //发布新版本
        .pipe(gulp.dest(build.js))
        .pipe(rev.manifest())
        .pipe(gulp.dest('./rev/js/'))
});

gulp.task('publish:js_lib', function() {
    return gulp.src([dev.js + 'lib/**/*'])
        .pipe(gulp.dest(build.js + 'lib'))
});

//删除生产下所有文件
gulp.task('server:del', function() {
    return del([
        build.basePath
    ]);
});

//版本控制自动解决依赖
gulp.task('rev', function() {
    return gulp.src(['./rev/**/*.json', build.basePath + '**/*' + "*.html", '!' + build.basePath + 'static'])
        .pipe(revCollector({
            replaceReved: true
        }))
        //.pipe(version(versionConfig))
        .pipe(gulp.dest(build.basePath))
});

//return gulp.src(['./rev/**/*.json', build.basePath + '**/*' + "*.html", '!' + build.basePath + 'static'])
//return gulp.src(['./rev/**/*.json', build.basePath + '*.html'])